import java.util.regex.Matcher

buildscript {
    repositories {
      maven { url 'https://plugins.gradle.org/m2/' }
    }
  dependencies {
    classpath 'com.netflix.nebula:gradle-ospackage-plugin:4.3.0'
  }
}

apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'nebula.ospackage-application'
apply plugin: 'maven'
apply plugin: 'idea'

idea.module.outputDir file("out/production/classes")
ext.moduleName = 'ai.swim'
sourceCompatibility = 1.9
description = "Illustrate basic Swim concepts- ValueLane, MapLane, CommandLane, Recon and Java Objects"
version = project.property('application.version')

def configFile = 'raspi'

repositories {
  mavenCentral()
  maven {
    url "https://oss.sonatype.org/content/repositories/snapshots/"
  }
}

dependencies {
  compile 'ai.swim:swim-server:3.9.2-SNAPSHOT'
  compile 'ai.swim:swim-client:3.9.2-SNAPSHOT'
  compile group: 'com.fazecast', name: 'jSerialComm', version: '2.0.2'
}

configurations {
  testCompile.exclude group: 'ai.swim:swim-server'
}

compileJava {
  options.compilerArgs += ['-Xlint']
}

afterEvaluate {
  compileJava {
    doFirst {
      options.compilerArgs += [
        '--module-path', classpath.asPath,
      ]
      classpath = files()
    }
    options.compilerArgs += ['-Xlint:all,-requires-automatic']
    options.encoding = 'UTF-8'
  }

  jar {
    inputs.property('moduleName', moduleName)
    manifest {
      attributes(
        'Implementation-Title': moduleName,
        'Implementation-Version': version,
        'Main-Class': mainClassName)
    }
  }

  tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
  }

  run {
    dependsOn jar
    doFirst {
      jvmArgs += [
        '-Dapp.config='+projectDir.parent+'/config/java/',
        '--module-path', files(configurations.runtimeClasspath, jar.archivePath).asPath,
        '--module', "${moduleName}/${mainClassName}",
      ]
      classpath = files()
    }
  }

  startScripts {
    inputs.property("moduleName", moduleName)
    doFirst {
      classpath = files()
      defaultJvmOpts = [
        '-Dapp.config='+projectDir.parent+'/config/java/',
        '--module-path', 'APP_HOME_LIBS',
        '--module', "${moduleName}/${mainClassName}"
      ]
    }
    doLast {
      def bashFile = new File(outputDir, applicationName)
      String bashContent = bashFile.text
      bashFile.text = bashContent.replaceFirst('APP_HOME_LIBS', Matcher.quoteReplacement('$APP_HOME/lib'))

      def batFile = new File(outputDir, applicationName + ".bat")
      String batContent = batFile.text
      batFile.text = batContent.replaceFirst('APP_HOME_LIBS', Matcher.quoteReplacement('%APP_HOME%\\lib'))
    }
  }
}

task runMain(type: JavaExec) {
  main = mainClassName
  systemProperties System.properties
  if (project.hasProperty('config')) {
      hostname = config
  }
}

javadoc {
  options.charSet = 'UTF-8'
}

mainClassName = 'ai.swim.Main'
applicationDefaultJvmArgs = ["-Dapp.config="+projectDir.parent+"/config/java/"]
//applicationDefaultJvmArgs = ["-Dapp.config="+projectDir.parent+"/config/java/"+hostname+"-app.properties", "-Dcom.sun.management.jmxremote.port=3333", "-Dcom.sun.management.jmxremote.ssl=false", "-Dcom.sun.management.jmxremote.authenticate=false", "-Dcom.sun.management.jmxremote.local.only=false", "-Dcom.sun.management.jmxremote.port=1098", "-Djava.rmi.server.hostname=192.168.0.100"]
